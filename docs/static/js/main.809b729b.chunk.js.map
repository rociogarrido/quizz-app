{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.tsx","components/QuestionCard.tsx","images/nattu-adnan.jpg","App.styles.tsx","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizzQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wHAaYA,E,wFAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,I,QAAMC,EAAmB,uCAAG,WAAOC,EAAgBC,GAAvB,iBAAAC,EAAA,6DACzBC,EADyB,6CACwBH,EADxB,uBAC6CC,EAD7C,2BAELG,MAAMD,GAFD,8BAEYE,OAFZ,cAEzBC,EAFyB,yBAIxBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,mBAAC,eAEdA,GAFa,IAGhBC,SCxBiBC,EDwBK,GAAD,mBAAKF,EAASG,mBAAd,CAAiCH,EAASI,iBCxB7B,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SAAxD,IAACL,MDiBM,2CAAH,wD,cEjBnBM,EAAUC,IAAOC,IAAV,oRAmBPC,EAAgBF,IAAOC,IAAV,mfAcJ,gBAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACVD,EACM,4CACCA,GAAWC,EACZ,2CACA,8C,OCHHC,EAtBuB,SAAC,GAAD,IAAEd,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,QAASc,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,WAAYC,EAA3C,EAA2CA,eAAgBC,EAA3D,EAA2DA,eAA3D,OACpC,eAACV,EAAD,WACE,oBAAGW,UAAU,SAAb,uBACaF,EADb,MACgCC,KAEhC,mBAAGE,wBAAyB,CAAEC,OAAQrB,KACtC,8BACGC,EAAQF,KAAI,SAACuB,GAAD,OACX,cAACX,EAAD,CAEEC,SAAmB,OAAVI,QAAU,IAAVA,OAAA,EAAAA,EAAYO,iBAAkBD,EACvCT,aAAuB,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAYM,UAAWA,EAHtC,SAKE,wBAAQE,WAAYR,EAAYS,MAAOH,EAAQI,QAASX,EAAxD,SACE,sBAAMK,wBAAyB,CAAEC,OAAQC,QALtCA,YCxBA,MAA0B,wCCI5BK,EAAcC,YAAH,sWAKQC,GAanBrB,EAAUC,IAAOC,IAAV,6nCCmFLoB,EAvFH,WAEV,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAA0B,IAA5D,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAsCN,mBAAyB,IAA/D,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA0BR,mBAAS,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAAgCV,oBAAS,GAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KAKMC,EAAW,uCAAG,4BAAAnD,EAAA,6DAClBwC,GAAW,GACXU,GAAY,GAFM,SAISrD,EAlBP,GAkB4CD,EAAWwD,MAJzD,OAIZC,EAJY,OAMlBX,EAAaW,GACbL,EAAS,GACTF,EAAe,IACfF,EAAU,GACVJ,GAAW,GAVO,4CAAH,qDA2CjB,OACE,qCACA,cAACN,EAAD,IACA,eAAC,EAAD,WACE,6CAGCe,GAhEiB,KAgELJ,EAAYS,OACzB,wBAAQ5B,UAAU,QAAQO,QAASkB,EAAnC,mBACI,KAEFF,EAAqD,KAA1C,oBAAGvB,UAAU,QAAb,oBAA6BqB,KACzCR,EAAU,sDAA+B,MAExCA,IAAYU,GACd,cAAC,EAAD,CACAzB,eAAgBmB,EAAS,EACzBlB,eA1EkB,GA2ElBlB,SAAUkC,EAAUE,GAAQpC,SAC5BC,QAASiC,EAAUE,GAAQnC,QAC3Be,WAAYsB,EAAcA,EAAYF,QAAUY,EAChDjC,SAnDgB,SAACkC,GACnB,IAAKP,EAAU,CAEb,IAAMpB,EAAS2B,EAAEC,cAAczB,MAEzBb,EAAUsB,EAAUE,GAAQhC,iBAAmBkB,EAEjDV,GAAS6B,GAAS,SAAAU,GAAI,OAAIA,EAAO,KAErC,IAAMC,EAAe,CACnBpD,SAAUkC,EAAUE,GAAQpC,SAC5BsB,SACAV,UACAW,cAAeW,EAAUE,GAAQhC,gBAEnCmC,GAAe,SAACY,GAAD,4BAAcA,GAAd,CAAoBC,WAuCjCV,GAAaV,GAAWM,EAAYS,SAAWX,EAAS,GAAgBiB,IAAXjB,EAE3D,KADF,wBAAQjB,UAAU,OAAOO,QApCV,WAEnB,IAAM4B,EAAelB,EAAS,EAhDV,KAkDhBkB,EACFX,GAAY,GAEZN,EAAUiB,IA6BR,kCC9FRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.809b729b.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\n\nexport const fetchQuizzQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    // console.log(data);\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n        }\n    ));\n};","// quick fix for creating a randomizer function\n\nexport const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5);\n\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    text-align: center;\n\n    p {\n        font-size: 1rem;\n    }\n`;\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) =>\n            correct\n                ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n                : !correct && userClicked\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n    }\n`;\n\n\n","import React from 'react';\n// types\nimport { AnswerObject } from '../App';\n// styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNumber: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({question, answers, callback, userAnswer, questionNumber, totalQuestions }) => (\n  <Wrapper>\n    <p className=\"number\">\n      Question: {questionNumber} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper \n          key={answer} \n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer} \n        >\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n  </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/nattu-adnan.c866d607.jpg\";","import styled, { createGlobalStyle} from \"styled-components\";\n\nimport BGImage from \"./images/nattu-adnan.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n`;\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    > p {\n        color: #fff;\n    }\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n    h1 {\n        font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        font-weight: 400;\n        text-align: center;\n        margin: 20px;\n    }\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n    .start {\n        max-width: 200px;\n    }\n`;\n\n","import React, {useState} from 'react';\nimport { fetchQuizzQuestions } from './API';\n// components\nimport QuestionCard from './components/QuestionCard';\n// types\nimport { QuestionState, Difficulty } from './API';\n// styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  // console.log(fetchQuizzQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\n  // console.log(questions);\n  \n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizzQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // user answer\n      const answer = e.currentTarget.value;\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // add score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      // save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // move on to the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }; \n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n      <h1>\n        React Quizz\n      </h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n      <button className=\"start\" onClick={startTrivia}>Start</button>\n      ) : null}\n\n      {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n      {loading ? <p>Loading Questions ...</p> : null}\n      \n      {!loading && !gameOver && (\n      <QuestionCard \n      questionNumber={number + 1} \n      totalQuestions={TOTAL_QUESTIONS} \n      question={questions[number].question} \n      answers={questions[number].answers} \n      userAnswer={userAnswers ? userAnswers[number] : undefined} \n      callback={checkAnswer} \n      />\n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n        <button className=\"next\" onClick={nextQuestion}>Next Question</button>\n      ) : null} \n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}